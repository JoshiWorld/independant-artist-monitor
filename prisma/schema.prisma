// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Customer {
    id        String      @id @default(cuid())
    name      String
    greenMax  Float? // z.B. 0.50
    yellowMax Float? // z.B. 0.60
    accounts  AdAccount[]
}

model AdAccount {
    id         String     @id
    name       String
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    campaigns  Campaign[]
    Customer   Customer?  @relation(fields: [customerId], references: [id])
    customerId String?
}

model Campaign {
    id        String         @id
    name      String
    account   AdAccount      @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId String
    createdAt DateTime       @default(now())
    status    CampaignStatus @default(ACTIVE)
    greenMax  Float? // z.B. 0.50
    yellowMax Float? // z.B. 0.60
    metrics   DailyMetric[]
}

model DailyMetric {
    id          String   @id @default(cuid())
    campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    campaignId  String
    date        DateTime @default(now())
    conversions Int
    spend       Float
    impressions Int
    ctr         Float
    cpc         Float
    clicks      Int
    convPrice   Float

    @@unique([campaignId, date], name: "campaignId_date")
}

model Error {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    metaAccessToken String?
    metaTokenExpiry DateTime?
    greenMax        Float       @default(0.5) // z.B. 0.50
    yellowMax       Float       @default(0.59) // z.B. 0.60
    adAccounts      AdAccount[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum CampaignStatus {
    ACTIVE
    PAUSED
    DELETED
    ARCHIVED
}
